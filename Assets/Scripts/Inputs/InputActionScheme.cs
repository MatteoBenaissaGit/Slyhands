//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/Inputs/InputActionScheme.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionScheme: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionScheme()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionScheme"",
    ""maps"": [
        {
            ""name"": ""LevelEditor"",
            ""id"": ""f82a47c9-45b1-43b1-9c85-f00b0a3cbec3"",
            ""actions"": [
                {
                    ""name"": ""CameraMoveButton"",
                    ""type"": ""Button"",
                    ""id"": ""226f4253-6fd1-4209-9873-9b6e17f40824"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraMoveVector"",
                    ""type"": ""Value"",
                    ""id"": ""ffd16df6-1737-467f-b53b-ed255313529e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""Value"",
                    ""id"": ""32a04d80-0da7-4a7c-ad44-a393009d45ba"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""667973c7-f62c-4ad5-9ced-989747c65ff8"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5588e9f8-d0a9-4f7c-8749-09445d02479a"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMoveVector"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f3abd31c-fc45-478d-acf5-f26ebe8266d8"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // LevelEditor
        m_LevelEditor = asset.FindActionMap("LevelEditor", throwIfNotFound: true);
        m_LevelEditor_CameraMoveButton = m_LevelEditor.FindAction("CameraMoveButton", throwIfNotFound: true);
        m_LevelEditor_CameraMoveVector = m_LevelEditor.FindAction("CameraMoveVector", throwIfNotFound: true);
        m_LevelEditor_CameraZoom = m_LevelEditor.FindAction("CameraZoom", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // LevelEditor
    private readonly InputActionMap m_LevelEditor;
    private List<ILevelEditorActions> m_LevelEditorActionsCallbackInterfaces = new List<ILevelEditorActions>();
    private readonly InputAction m_LevelEditor_CameraMoveButton;
    private readonly InputAction m_LevelEditor_CameraMoveVector;
    private readonly InputAction m_LevelEditor_CameraZoom;
    public struct LevelEditorActions
    {
        private @InputActionScheme m_Wrapper;
        public LevelEditorActions(@InputActionScheme wrapper) { m_Wrapper = wrapper; }
        public InputAction @CameraMoveButton => m_Wrapper.m_LevelEditor_CameraMoveButton;
        public InputAction @CameraMoveVector => m_Wrapper.m_LevelEditor_CameraMoveVector;
        public InputAction @CameraZoom => m_Wrapper.m_LevelEditor_CameraZoom;
        public InputActionMap Get() { return m_Wrapper.m_LevelEditor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelEditorActions set) { return set.Get(); }
        public void AddCallbacks(ILevelEditorActions instance)
        {
            if (instance == null || m_Wrapper.m_LevelEditorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_LevelEditorActionsCallbackInterfaces.Add(instance);
            @CameraMoveButton.started += instance.OnCameraMoveButton;
            @CameraMoveButton.performed += instance.OnCameraMoveButton;
            @CameraMoveButton.canceled += instance.OnCameraMoveButton;
            @CameraMoveVector.started += instance.OnCameraMoveVector;
            @CameraMoveVector.performed += instance.OnCameraMoveVector;
            @CameraMoveVector.canceled += instance.OnCameraMoveVector;
            @CameraZoom.started += instance.OnCameraZoom;
            @CameraZoom.performed += instance.OnCameraZoom;
            @CameraZoom.canceled += instance.OnCameraZoom;
        }

        private void UnregisterCallbacks(ILevelEditorActions instance)
        {
            @CameraMoveButton.started -= instance.OnCameraMoveButton;
            @CameraMoveButton.performed -= instance.OnCameraMoveButton;
            @CameraMoveButton.canceled -= instance.OnCameraMoveButton;
            @CameraMoveVector.started -= instance.OnCameraMoveVector;
            @CameraMoveVector.performed -= instance.OnCameraMoveVector;
            @CameraMoveVector.canceled -= instance.OnCameraMoveVector;
            @CameraZoom.started -= instance.OnCameraZoom;
            @CameraZoom.performed -= instance.OnCameraZoom;
            @CameraZoom.canceled -= instance.OnCameraZoom;
        }

        public void RemoveCallbacks(ILevelEditorActions instance)
        {
            if (m_Wrapper.m_LevelEditorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ILevelEditorActions instance)
        {
            foreach (var item in m_Wrapper.m_LevelEditorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_LevelEditorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public LevelEditorActions @LevelEditor => new LevelEditorActions(this);
    public interface ILevelEditorActions
    {
        void OnCameraMoveButton(InputAction.CallbackContext context);
        void OnCameraMoveVector(InputAction.CallbackContext context);
        void OnCameraZoom(InputAction.CallbackContext context);
    }
}
